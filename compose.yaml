x-healthcheck-base: &healthcheck-base
  interval: 5s
  retries: 5
  start_period: 5s
  timeout: 3s

x-service-base: &service-base
  env_file: ./.env
  restart: always
  stop_grace_period: 3s

services:

# Dependencies

  postgres:
    <<: *service-base
    container_name: podfish-postgres
    healthcheck:
      <<: *healthcheck-base
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
    image: postgres:latest
    volumes:
      - ./pg-data:/var/lib/postgresql/data

  redis:
    <<: *service-base
    command: redis-server --requirepass ${REDIS_PASSWORD}
    container_name: podfish-redis
    healthcheck:
      <<: *healthcheck-base
      test: ["CMD", "redis-cli", "ping"]
    image: redis:latest
    volumes:
      - redis-data:/data

# Podfish Backend Services

  api:
    <<: *service-base
    build:
      context: .
      dockerfile: api/Dockerfile
      target: ${ENVIRONMENT}
    container_name: podfish-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-base
      test: ["CMD", "wget", "-qO-", "http://podfish-api:8080/healthz"]
    volumes:
      - .:/app
      - ./rss-data:/rss-data

  scheduler:
    <<: *service-base
    build:
      context: .
      dockerfile: scheduler/Dockerfile
      target: ${ENVIRONMENT}
    container_name: podfish-scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-base
      test: ["CMD", "wget", "-qO-", "http://podfish-scheduler:8080/healthz"]
    volumes:
      - .:/app

  worker:
    <<: *service-base
    build:
      context: .
      dockerfile: worker/Dockerfile
      target: ${ENVIRONMENT}
    container_name: podfish-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-base
      test: ["CMD", "wget", "-qO-", "http://podfish-worker:8080/healthz"]
    volumes:
      - .:/app
      - ./rss-data:/rss-data

# Podfish Frontend

  ui:
    <<: *service-base
    build:
      context: ui
      target: ${ENVIRONMENT}
    container_name: podfish-ui
    depends_on:
      api:
        condition: service_healthy
    ports:
      - 127.0.0.1:${UI_PORT}:${UI_PORT}
    volumes:
      - ./ui:/app
      - /app/node_modules

volumes:
  pg-data:
  redis-data:

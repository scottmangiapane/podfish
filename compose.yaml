services:

# Dependencies

  postgres:
    container_name: podfish_postgres
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    image: postgres:latest
    restart: always
    volumes:
      - ./pg_data:/var/lib/postgresql/data

  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD}
    container_name: podfish_redis
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    image: redis:latest
    restart: always

# Podfish Backend Services

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: ${ENVIRONMENT}
    container_name: podfish_api
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
    restart: always
    stop_grace_period: 3s
    volumes:
      - .:/app
      - ./rss_data:/podfish-data

  scheduler:
    build:
      context: .
      dockerfile: scheduler/Dockerfile
      target: ${ENVIRONMENT}
    container_name: podfish_scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    restart: always
    stop_grace_period: 3s
    volumes:
      - .:/app

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
      target: ${ENVIRONMENT}
    container_name: podfish_worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    restart: always
    stop_grace_period: 3s
    volumes:
      - .:/app
      - ./rss_data:/podfish-data

# Podfish Frontend

  ui:
    build:
      context: ui
      target: ${ENVIRONMENT}
    container_name: podfish_ui
    env_file:
      - ./.env
    ports:
      - 127.0.0.1:${UI_PORT}:${UI_PORT}
    restart: always
    stop_grace_period: 3s
    volumes:
      - ./ui:/app
      - /app/node_modules

volumes:
  pg_data:
